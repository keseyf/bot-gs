import { Composer, InlineKeyboard } from "grammy";
import { app } from "../../../utils/utils";
import products from "../../../utils/card";
import { backMainKeyboard } from "../../../utils/Keyboards/bot/backMainKeyboard";
import { MercadoPagoConfig, Payment } from "mercadopago";
import 'dotenv/config';

const MP_TOKEN = process.env.MP_TOKEN;
if (!MP_TOKEN) throw new Error("MercadoPago access token is not defined");

const mp = new MercadoPagoConfig({ accessToken: MP_TOKEN });
const payment = new Payment(mp);

const sellerId = process.env.SELLER_ID;
if (!sellerId) console.error("No seller id provided");

const CX = process.env.CX;

const sellerUsername = process.env.SELLER_USERNAME;
if (!sellerUsername) throw new Error("SELLER_USERNAME is not defined");

const composer = new Composer();
const cooldownSet = new Set<number>(); // Cooldown antiflood

composer.callbackQuery(/^buy_pix_(.+)$/, async (ctx) => {
    const userId = ctx.from?.id;
    if (!userId) {
        await ctx.reply("Usu√°rio n√£o identificado.");
        return;
    }

    if (cooldownSet.has(userId)) {
        await ctx.answerCallbackQuery({
            text: "Espere um pouco antes de clicar novamente.",
            show_alert: false,
        });
        return;
    }

    cooldownSet.add(userId);
    setTimeout(() => cooldownSet.delete(userId), 5000);

    try {
        const match = ctx.callbackQuery?.data?.match(/^buy_pix_(.+)$/);
        if (!match) return;

        const cardTypeRaw = match[1];
        const productTypeKey = cardTypeRaw.toUpperCase();
        const product = products[productTypeKey];

        if (!product) {
            await ctx.reply("‚ùå Tipo de cart√£o inv√°lido.");
            return;
        }

        await ctx.answerCallbackQuery();
        await ctx.editMessageText("Gerando c√≥digo PIX...");

        const response = await payment.create({
            body: {
                transaction_amount: Number(product),
                payment_method_id: "pix",
                payer: {
                    email: `user_${userId}@example.com`,
                },
                description: `Compra de cart√£o ${productTypeKey}`,
            },
        });

        const qrCode = response.point_of_interaction?.transaction_data?.qr_code;
        if (!qrCode) throw new Error("QR Code n√£o gerado.");

        const paymentId = response.id;

        await ctx.reply(
            `
‚úÖ *C√≥digo de pagamento criado com sucesso!*

üë§ *Id de usu√°rio:* \`${userId}\`
üÜî *Id de pagamento:* ${paymentId}
üõí *Produto:* ${productTypeKey} 
üí∞ *Valor do produto:* R$ ${Number(product).toFixed(2)}

üî∑ *Chave Pix:* \`${qrCode}\`

üí° *Dica:* _Clique sobre o c√≥digo acima para copi√°-lo automaticamente para a √°rea de transfer√™ncia!_

_Assim que o pagamento for confirmado, o envio ser√° feito pelo pr√≥prio bot._`,
            {
                parse_mode: "Markdown",
                reply_markup: new InlineKeyboard().text("‚è∞ Aguardando pagamento"),
            }
        );

        // Verifica o pagamento a cada 5 segundos (m√°x 3 minutos)
        for (let i = 0; i < 36; i++) {
            try {
                const statusResponse = await payment.get({ id: Number(paymentId) });

                if (statusResponse?.status === "approved") {
                    await ctx.editMessageText(`‚úÖ Compra realizada com sucesso!

üí≥ Valor: R$ ${Number(product).toFixed(2)}
${ctx.from?.username ? "üë§ Usu√°rio: t.me/" + ctx.from.username : ""}
üÜî ID: \`${userId}\`

Logo um administrador ir√° entrar em contato para enviar-lhe o produto.`, {
                        parse_mode: "Markdown",
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: "üè† Menu", callback_data: "main" }],
                                [{ text: "üîÑ Comprar outro produto", callback_data: "cards" }],
                                [{ text: "üìû Entrar em contato", url: `https://t.me/${sellerUsername}` }],
                            ],
                        },
                    });

                    try {
                        await app.api.sendMessage(String(sellerId), `‚úÖ Compra de saldo conclu√≠da.

${ctx.from?.username ? "üë§ Usu√°rio: t.me/" + ctx.from.username : ""}
üÜî ID: \`${userId}\`
üí≥ Valor: R$ ${Number(product).toFixed(2)}
üõí Produto: ${productTypeKey.replace(/_/g, " ")}
üïí Hor√°rio de pagamento: ${new Date().toLocaleString()}
üí† Tipo de pagamento: Pix`, {
                            parse_mode: "Markdown",
                            reply_markup: new InlineKeyboard().text("üí¨ Responder Cliente", "sendT"),
                        });

                        await app.api.sendMessage(String(CX), `‚úÖ Compra de saldo conclu√≠da.

${ctx.from?.username ? "üë§ Usu√°rio: t.me/" + ctx.from.username : ""}
üÜî ID: ${userId}
üí≥ Valor: R$ ${Number(product).toFixed(2)}
üõí Produto: ${productTypeKey.replace(/_/g, " ")}
üïí Hor√°rio de pagamento: ${new Date().toLocaleString()}
üí† Tipo de pagamento: Pix`, {
                            parse_mode: "Markdown",
                            reply_markup: new InlineKeyboard().text("üí¨ Responder Cliente", "sendT"),
                        });
                    } catch (error) {
                        console.error("Erro ao notificar o vendedor:", error);
                        await ctx.reply(`‚ùå Ocorreu um erro ao notificar o vendedor. Entre em contato com a modera√ß√£o: @${sellerUsername}`);
                    }
                    return;
                }
            } catch (error) {
                console.error("Erro verificando pagamento:", error);
            }
            await new Promise(resolve => setTimeout(resolve, 5000));
        }

        // Timeout ap√≥s 3 minutos
        try {
            await ctx.editMessageText("‚è≥ O tempo para pagamento expirou. Por favor, tente novamente.", {
                reply_markup: backMainKeyboard,
            });
            await payment.cancel({ id: Number(paymentId) });
        } catch (error) {
            console.error("Erro ao cancelar pagamento:", error);
            await ctx.reply("‚ùå Ocorreu um erro ao cancelar o pagamento. Tente novamente mais tarde.");
        }
    } catch (e) {
        console.error(e);
        await ctx.reply("Erro inesperado.");
    }
});

export default composer;
